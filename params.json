{
  "name": "Fall2016-project-axis7818",
  "tagline": "fall2016-project-axis7818 created by GitHub Classroom",
  "body": "# NowYouKnow\r\n\r\n[![Build Status](https://travis-ci.org/cpe305/fall2016-project-axis7818.svg?branch=master)](https://travis-ci.org/cpe305/fall2016-project-axis7818)\r\n\r\nA simple web app and API for asking and answering simple/stupid questions.\r\n\r\nCameron Taylor\r\n\r\n---\r\n\r\n![topic](https://raw.githubusercontent.com/cpe305/fall2016-project-axis7818/master/docs/topic.png)\r\n\r\n---\r\n\r\n![question](https://raw.githubusercontent.com/cpe305/fall2016-project-axis7818/master/docs/question.png)\r\n\r\n---\r\n\r\n![random](https://raw.githubusercontent.com/cpe305/fall2016-project-axis7818/master/docs/random.png)\r\n\r\n---\r\n\r\n# System Architecture\r\n\r\nNow You Know is built with a 3 tier service oriented architecture. All of the database infrastructure is stored in the `nowyouknow.common` package, all of the service infrastructure is stored in the `nowyouknow.service` package, and all of the front-end code is stored in `service/src/main/resources/public` and served statically.\r\n\r\n![system architecture](https://raw.githubusercontent.com/cpe305/fall2016-project-axis7818/master/docs/SystemArchitecture.png)\r\n\r\n---\r\n\r\n# Data Entities\r\n\r\nThese objects are the main entities that are stored in the database. They exist in the `nowyouknow.common.data` package and represent database rows. Interactions with the database are done with the `nowyouknow.common.dao` package with CrudRepository interfaces. All Dao objects extend  Spring's [CrudRepository](http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html). Only additional methods are documented here.\r\n\r\n## Class Diagram\r\n![class diagram](https://raw.githubusercontent.com/cpe305/fall2016-project-axis7818/master/docs/Class%20Diagram.png)\r\n\r\n## [Topic](https://github.com/cpe305/fall2016-project-axis7818/blob/master/common/src/main/java/nowyouknow/common/data/Topic.java)\r\n\r\n<dl>\r\n   <dt>id: Long</dt>\r\n   <dd>A unique identifier.</dd>\r\n\r\n   <dt>name: String</dt>\r\n   <dd>The name of the topic.</dd>\r\n\r\n   <dt>description: String</dt>\r\n   <dd>A short description of the topic.</dd>\r\n\r\n   <dt>questions: List<Question></dt>\r\n   <dd>A list of all questions under this topic.</dd>\r\n</dl>\r\n\r\n### [TopicDao](https://github.com/cpe305/fall2016-project-axis7818/blob/master/common/src/main/java/nowyouknow/common/dao/TopicDao.java)\r\n\r\n<dl>\r\n   <dt>findByName(name: String): Topic</dt>\r\n   <dd>Finds a Topic object by its name.</dd>\r\n</dl>\r\n\r\n## [Question](https://github.com/cpe305/fall2016-project-axis7818/blob/master/common/src/main/java/nowyouknow/common/data/Question.java)\r\n\r\n<dl>\r\n   <dt>id: Long</dt>\r\n   <dd>A unique identifier.</dd>\r\n\r\n   <dt>text: String</dt>\r\n   <dd>The question itself.</dd>\r\n\r\n   <dt>open: Boolean</dt>\r\n   <dd>Whether or not a question is open for being answered or edited.</dd>\r\n\r\n   <dt>whenAsked: Date</dt>\r\n   <dd>The point in time when the question was asked.</dd>\r\n\r\n   <dt>topic: Topic</dt>\r\n   <dd>The topic that the question falls under. Can be null.</dd>\r\n\r\n   <dt>reaction: Reaction</dt>\r\n   <dd>The reaction object for this question. Cannot be null</dd>\r\n\r\n   <dt>answers: List<Answer></dt>\r\n   <dd>A list of all answers for this question.</dd>\r\n</dl>\r\n\r\n## [Answer](https://github.com/cpe305/fall2016-project-axis7818/blob/master/common/src/main/java/nowyouknow/common/data/Answer.java)\r\n\r\n<dl>\r\n   <dt>id: Long</dt>\r\n   <dd>A unique identifier</dd>\r\n\r\n   <dt>text: String</dt>\r\n   <dd>The actual answer.</dd>\r\n\r\n   <dt>whenAnswered: Date</dt>\r\n   <dd>The point in time when the answer was made.</dd>\r\n\r\n   <dt>question: Question</dt>\r\n   <dd>The question that this Answer answers. Cannot be null.</dd>\r\n\r\n   <dt>reaction: Reaction</dt>\r\n   <dd>The reaction object for this Answer. Cannot be null</dd>\r\n</dl>\r\n\r\n## [Reaction](https://github.com/cpe305/fall2016-project-axis7818/blob/master/common/src/main/java/nowyouknow/common/data/Reaction.java)\r\n\r\n<dl>\r\n   <dt>id: Long</dt>\r\n   <dd>A unique identifier.</dd>\r\n\r\n   <dt>likes: Integer</dt>\r\n   <dd>The number of times this object was 'liked'.</dd>\r\n\r\n   <dt>dislikes: Integer</dt>\r\n   <dd>The number of times this object was 'disliked'.</dd>\r\n\r\n   <dt>laughs: Integer</dt>\r\n   <dd>The number of times this object was 'laughed'.</dd>\r\n</dl>\r\n\r\n---\r\n\r\n# System Design\r\n\r\n## Architecture\r\n\r\n### MVC\r\n\r\nThe MVC pattern is used in two places: service controllers and Angular's front end.\r\nThe service controllers hold methods (controller) that house business logic and access the database (model) accordingly.\r\nThe results of these operations are passed to the front-end (view) when they have completed.\r\n\r\nAngular takes the resulting data from API calls and builds its own javascript objects to act as a model local to the browser.\r\nThese model objects are presented in html form and controllers written in javascript handle user interactions, form validation, and communication with the service.\r\n\r\n### Dependency Injection\r\n\r\nThe pattern of dependency injection is used throughout the entire project.\r\nAll java classes are valid beans and all javascript components are wrapped as appropriate angular components.\r\nThis means that every object in the system can be mocked and injected into other objects according to the needs of that object.\r\nFor example, when testing the controllers, the DAO objects are mocked so that they do not perform any database accesses.\r\nThis allows for true unit testing that isolates the controllers' behavior.\r\n\r\n## Design Patterns\r\n\r\nAs it stands now, there are no GoF design patterns present in the NowYouKnow codebase.\r\nThis is on purpose as there were no opportunities to leverage any of these design patterns in an appropriate fashion.\r\nI had intended to add a `Reactable` interface to use a bridge pattern, but since my Question and Answer classes needed to map directly to database tables, this was hard to do while preserving ORM (Object Relational Mapping).\r\n\r\n---\r\n\r\n# Key Learning\r\n\r\nThe thing that I liked the best about my project was the use of dependency injection. Not only did this allow for strong and thorough unit tests, but it also allowed me to better take advantage of functionality offered by the Spring framework. The code that I wrote in this project follows \"best practice\" conventions closer than any other code I have written, and even though the overall project is not super complex, it is beautiful code to look at.\r\n\r\nThe most important lesson that I learned was that Software Engineering is not just writing code. I already knew this, but I never had an appreciation for just how important it is to write good documentation and testing. Writing actual system code only took about 20% of my time working on the project.\r\n\r\n---\r\n\r\n# REST Resources\r\n\r\nTopic, Question, and Answer objects each have a corresponding class in `nowyouknow.service.results` that represents a flattened version of the object. These are the entities that are converted to/from json request bodies.\r\n\r\n[JsonTopic](https://github.com/cpe305/fall2016-project-axis7818/blob/master/service/src/main/java/nowyouknow/service/results/JsonTopic.java)\r\n```\r\n{\r\n   \"id\": 1,\r\n   \"name\": \"Hitchhiker's Guide To The Galaxy\"\r\n}\r\n```\r\n\r\n[JsonQuestion](https://github.com/cpe305/fall2016-project-axis7818/blob/master/service/src/main/java/nowyouknow/service/results/JsonQuestion.java)\r\n```\r\n{\r\n   \"id\": 1,\r\n   \"text\": \"What is the answer to life, the universe, and everything?\",\r\n   \"open\": true,\r\n   \"whenAsked\": 57392084732,\r\n   \"topicId\": 1,\r\n   \"likes\": 894,\r\n   \"dislikes\": 32,\r\n   \"laughs\": 123\r\n}\r\n```\r\n\r\n[JsonAnswer](https://github.com/cpe305/fall2016-project-axis7818/blob/master/service/src/main/java/nowyouknow/service/results/JsonAnswer.java)\r\n```\r\n{\r\n   \"id\": 1,\r\n   \"text\": \"42\",\r\n   \"questionId\": 1,\r\n   \"likes\": 42,\r\n   \"dislikes\": 0,\r\n   \"laughs\": 3\r\n}\r\n```\r\n\r\n## `/topic`\r\n\r\nRequests to this URI are handled by [TopicController](https://github.com/cpe305/fall2016-project-axis7818/blob/master/service/src/main/java/nowyouknow/service/controllers/TopicController.java).\r\n\r\n### `POST /topic/`\r\n```\r\n{\r\n   \"name\": \"New Topic\"\r\n}\r\n```\r\nPost a new topic. The name must be less than 257 characters and a topic of the same name cannot already exist in the database.\r\n\r\n### `GET /topic/`\r\nRetrieves a list of all topics.\r\n\r\n### `GET /topic/{identifier}`\r\nRetrieve a single topic. The identifier can be the topic's name or id.\r\n\r\n### `GET /topic/{identifier}/questions`\r\nRetrieve a list of all questions for a given topic. The identifier can be the topic's name or id.\r\n\r\n### `PUT /topic/{identifier}`\r\n```\r\n{\r\n   \"name\": \"New Name\"\r\n}\r\n```\r\nUpdate a topic identified by `{identifier}` with the body parameters. A topic with the same name cannot exist in the database.\r\n\r\n### `DELETE /topic/{identifier}`\r\nDelete a topic. Identifier can be the id or name.\r\n\r\n## `/question`\r\n\r\nRequests to this URI are handled by [QuestionController](https://github.com/cpe305/fall2016-project-axis7818/blob/master/service/src/main/java/nowyouknow/service/controllers/QuestionController.java).\r\n\r\n### `POST /question/`\r\n\r\n### `GET /question/{id}`\r\n\r\n### `GET /question/{id}/answers`\r\n\r\n### `PUT /question/{id}`\r\n\r\n### `DELETE /question/{id}`\r\n\r\n## `/answer`\r\n\r\nRequests to this URI are handled by [AnswerController](https://github.com/cpe305/fall2016-project-axis7818/blob/master/service/src/main/java/nowyouknow/service/controllers/AnswerController.java).\r\n\r\n### `POST /answer/`\r\n\r\n### `PUT /answer/{id}`\r\n\r\n### `GET /answer/{id}`\r\n\r\n---\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}